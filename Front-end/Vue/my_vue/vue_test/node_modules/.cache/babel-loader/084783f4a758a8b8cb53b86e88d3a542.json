{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport { urlAlphabet } from './url-alphabet/index.js';\n\nvar random = function random(bytes) {\n  return crypto.getRandomValues(new Uint8Array(bytes));\n};\n\nvar customRandom = function customRandom(alphabet, defaultSize, getRandom) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  var step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    var id = '';\n\n    while (true) {\n      var bytes = getRandom(step);\n      var j = step;\n\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\n\nvar customAlphabet = function customAlphabet(alphabet) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\n\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  return crypto.getRandomValues(new Uint8Array(size)).reduce(function (id, byte) {\n    byte &= 63;\n\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte > 62) {\n      id += '-';\n    } else {\n      id += '_';\n    }\n\n    return id;\n  }, '');\n};\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","id","j","customAlphabet","nanoid","reduce","byte","toString","toUpperCase"],"sources":["/run/media/jamin/more/A-daily/Holiday/2022/Front-end/Vue/my_vue/vue_test/node_modules/nanoid/index.browser.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,QAA4B,yBAA5B;;AACA,IAAIC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;EAAA,OAAIC,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAeH,KAAf,CAAvB,CAAJ;AAAA,CAAlB;;AACA,IAAII,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,EAAsC;EACvD,IAAIC,IAAI,GAAG,CAAC,KAAMC,IAAI,CAACC,GAAL,CAASL,QAAQ,CAACM,MAAT,GAAkB,CAA3B,IAAgCF,IAAI,CAACG,GAA5C,IAAoD,CAA/D;EACA,IAAIC,IAAI,GAAG,CAAC,EAAG,MAAML,IAAN,GAAaF,WAAd,GAA6BD,QAAQ,CAACM,MAAxC,CAAZ;EACA,OAAO,YAAwB;IAAA,IAAvBG,IAAuB,uEAAhBR,WAAgB;IAC7B,IAAIS,EAAE,GAAG,EAAT;;IACA,OAAO,IAAP,EAAa;MACX,IAAIf,KAAK,GAAGO,SAAS,CAACM,IAAD,CAArB;MACA,IAAIG,CAAC,GAAGH,IAAR;;MACA,OAAOG,CAAC,EAAR,EAAY;QACVD,EAAE,IAAIV,QAAQ,CAACL,KAAK,CAACgB,CAAD,CAAL,GAAWR,IAAZ,CAAR,IAA6B,EAAnC;QACA,IAAIO,EAAE,CAACJ,MAAH,KAAcG,IAAlB,EAAwB,OAAOC,EAAP;MACzB;IACF;EACF,CAVD;AAWD,CAdD;;AAeA,IAAIE,cAAc,GAAG,SAAjBA,cAAiB,CAACZ,QAAD;EAAA,IAAWS,IAAX,uEAAkB,EAAlB;EAAA,OACnBV,YAAY,CAACC,QAAD,EAAWS,IAAX,EAAiBf,MAAjB,CADO;AAAA,CAArB;;AAEA,IAAImB,MAAM,GAAG,SAATA,MAAS;EAAA,IAACJ,IAAD,uEAAQ,EAAR;EAAA,OACXb,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAeW,IAAf,CAAvB,EAA6CK,MAA7C,CAAoD,UAACJ,EAAD,EAAKK,IAAL,EAAc;IAChEA,IAAI,IAAI,EAAR;;IACA,IAAIA,IAAI,GAAG,EAAX,EAAe;MACbL,EAAE,IAAIK,IAAI,CAACC,QAAL,CAAc,EAAd,CAAN;IACD,CAFD,MAEO,IAAID,IAAI,GAAG,EAAX,EAAe;MACpBL,EAAE,IAAI,CAACK,IAAI,GAAG,EAAR,EAAYC,QAAZ,CAAqB,EAArB,EAAyBC,WAAzB,EAAN;IACD,CAFM,MAEA,IAAIF,IAAI,GAAG,EAAX,EAAe;MACpBL,EAAE,IAAI,GAAN;IACD,CAFM,MAEA;MACLA,EAAE,IAAI,GAAN;IACD;;IACD,OAAOA,EAAP;EACD,CAZD,EAYG,EAZH,CADW;AAAA,CAAb;;AAcA,SAASG,MAAT,EAAiBD,cAAjB,EAAiCb,YAAjC,EAA+CN,WAA/C,EAA4DC,MAA5D"},"metadata":{},"sourceType":"module"}